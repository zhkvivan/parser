import requests
from bs4 import BeautifulSoup
import time
import os
import logging
import json
import html # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Å–∏–º–≤–æ–ª–æ–≤
import random

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---


# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ Gumtree UK —Å –≤–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Ç–æ–≤–∞—Ä, —Ä–∞–¥–∏—É—Å, –ª–æ–∫–∞—Ü–∏—è –∏ —Ç.–¥.)
# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô URL!
GUMTREE_SEARCH_URL = 'https://www.gumtree.com/search?search_location=Glasgow&search_category=accordians&q=accordion&distance=100&sort=date&search_distance=100'

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —É–∂–µ —É–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
SEEN_ADS_FILE = 'seen_gumtree_ads.json'

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä
REQUEST_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
}
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ chat_id (–ø—Ä–æ—Å—Ç–∞—è)
try:
    if not str(TELEGRAM_CHAT_ID).lstrip('-').isdigit():
         raise ValueError("TELEGRAM_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ int).")
    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —á–∞—Ç ID: {TELEGRAM_CHAT_ID}")
except ValueError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –≤ TELEGRAM_CHAT_ID: {e}")
    exit()

def load_seen_ads():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID –≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(SEEN_ADS_FILE):
        try:
            with open(SEEN_ADS_FILE, 'r') as f:
                return set(json.load(f))
        except (json.JSONDecodeError, IOError) as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {SEEN_ADS_FILE}: {e}. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
            return set()
    return set()

def save_seen_ads(seen_ads_set):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª."""
    try:
        with open(SEEN_ADS_FILE, 'w') as f:
            json.dump(list(seen_ads_set), f) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –≤ JSON
    except IOError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª {SEEN_ADS_FILE}: {e}")

def send_telegram_message_http(bot_token, chat_id, ad):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ HTTP API."""

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML –≤ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    safe_title = html.escape(ad['title'])
    safe_price = html.escape(ad['price'])
    safe_location = html.escape(ad['location'])
    # –°—Å—ã–ª–∫—É –æ–±—ã—á–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –Ω–æ –¥–ª—è –ø–∞—Ä–∞–Ω–æ–∏–∫–æ–≤ –º–æ–∂–Ω–æ html.escape(ad['link'], quote=True)

    message = (
        f"‚ú® <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ Gumtree!</b>\n\n"
        f"<b>{safe_title}</b>\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {safe_price}\n"
        f"üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {safe_location}\n\n"
        f'üîó <a href="{ad["link"]}">–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>' # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ç–µ–≥ –¥–ª—è —Å—Å—ã–ª–∫–∏
    )

    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML",
        "disable_web_page_preview": True # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    }

    try:
        response = requests.post(url, data=payload, timeout=10) # –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)
        response_json = response.json()

        if response_json.get("ok"):
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è: {ad['title']}")
            return True
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç Telegram API: {response_json.get('description')}")
            logging.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_json}")
            return False

    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram API: {e}")
        return False
    except json.JSONDecodeError:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –æ—Ç–≤–µ—Ç –æ—Ç Telegram API. –û—Ç–≤–µ—Ç: {response.text}")
        return False


def fetch_and_parse_gumtree():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ Gumtree."""
    logging.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é URL: {GUMTREE_SEARCH_URL}")
    try:
        response = requests.get(GUMTREE_SEARCH_URL, headers=REQUEST_HEADERS, timeout=20) # –¢–∞–π–º–∞—É—Ç 20 —Å–µ–∫
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP (–≤—Ä–æ–¥–µ 404, 500)
        logging.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞ (–°—Ç–∞—Ç—É—Å: {response.status_code})")
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gumtree: {e}")
        return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏

    soup = BeautifulSoup(response.text, 'html.parser')
    ads_found = []

    # --- –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ô ---
    # –≠–¢–û –°–ê–ú–ê–Ø –•–†–£–ü–ö–ê–Ø –ß–ê–°–¢–¨ - –°–ï–õ–ï–ö–¢–û–†–´ –ú–û–ì–£–¢ –ò–ó–ú–ï–ù–ò–¢–¨–°–Ø!
    ad_containers = soup.select('article.listing-maxi') # –ü—Ä–∏–º–µ—Ä 1
    if not ad_containers:
         ad_containers = soup.select("article[data-q='search-result']") # –ü—Ä–∏–º–µ—Ä 2
         # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(ad_containers)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

    for ad_container in ad_containers:
        try:
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É
            link_element = ad_container.select_one("a[data-q='search-result-anchor']")
            if not link_element or not link_element.has_attr('href'):
                logging.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            ad_link = link_element['href']
            if ad_link.startswith('/'):
                ad_link = 'https://www.gumtree.com' + ad_link
            ad_id = ad_link

            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_element = ad_container.select_one("div[data-q='tile-title']")
            ad_title = title_element.text.strip() if title_element else 'N/A'

            # –ò—â–µ–º —Ü–µ–Ω—É
            price_element = ad_container.select_one("div[data-testid='price']")
            ad_price = price_element.text.strip().replace('\n', ' ') if price_element else 'N/A'

            # –ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é
            location_element = ad_container.select_one("div[data-q='tile-location']")
            ad_location = location_element.text.strip() if location_element else 'N/A'

            ads_found.append({
                'id': ad_id,
                'title': ad_title,
                'price': ad_price,
                'location': ad_location,
                'link': ad_link
            })
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

    logging.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(ads_found)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    return ads_found

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Gumtree (HTTP API)...")
    seen_ads = load_seen_ads()
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(seen_ads)} ID —Ä–∞–Ω–µ–µ –≤–∏–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

    while True:
        logging.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
        current_ads = fetch_and_parse_gumtree()
        new_ads_found_this_run = []

        if not current_ads:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å Gumtree –≤ —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ.")
        else:
            for ad in current_ads:
                if ad['id'] not in seen_ads:
                    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {ad['title']} ({ad['id']})")
                    new_ads_found_this_run.append(ad)
                    seen_ads.add(ad['id']) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–≤–∏–¥–µ–Ω–Ω—ã—Ö

            if new_ads_found_this_run:
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_ads_found_this_run)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
                success_count = 0
                for ad in new_ads_found_this_run:
                    if send_telegram_message_http(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, ad):
                        success_count += 1
                    time.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

                if success_count == len(new_ads_found_this_run):
                     logging.info("–í—Å–µ –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                else:
                     logging.warning(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(new_ads_found_this_run)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

                save_seen_ads(seen_ads) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–≤–∏–¥–µ–Ω–Ω—ã—Ö
            else:
                logging.info("–ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ.")

        random_interval = random.randint(300, 1000) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {random_interval} —Å–µ–∫—É–Ω–¥.")
        time.sleep(random_interval) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è